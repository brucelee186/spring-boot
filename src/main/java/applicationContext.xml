<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		classpath:/org/springframework/beans/factory/xml/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
		classpath:/org/springframework/context/config/spring-context-4.2.xsd 
        http://www.springframework.org/schema/aop
        classpath:/org/springframework/aop/config/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx
        classpath:/org/springframework/transaction/config/spring-tx-4.2.xsd
	    http://www.springframework.org/schema/task
       	classpath:/org/springframework/scheduling/config/spring-task-4.2.xsd"
	default-lazy-init="false">

	<!--1 引入属性文件，在配置中占位使用 -->
	<context:property-placeholder
		location="classpath:db.properties" ignore-unresolvable="true" />
		
	<context:property-placeholder
		location="classpath:redis.properties" ignore-unresolvable="true" />

	<!--2 配置C3P0数据源 -->
	<bean id="project_datasource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!--驱动类名 -->
		<property name="driverClass" value="${project.jdbc.driver}" />
		<!-- url -->
		<property name="jdbcUrl" value="${project.jdbc.url}" />
		<!-- 用户名 -->
		<property name="user" value="${project.jdbc.uid}" />
		<!-- 密码 -->
		<property name="password" value="${project.jdbc.pwd}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数 -->
		<property name="acquireIncrement" value="5"></property>
		<!-- 初始连接池大小 -->
		<property name="initialPoolSize" value="10"></property>
		<!-- 连接池中连接最小个数 -->
		<property name="minPoolSize" value="5"></property>
		<!-- 连接池中连接最大个数 -->
		<property name="maxPoolSize" value="20"></property>
		<!-- 每次连接检查有效性，设置ture会影响整体性能 -->
		<property name="testConnectionOnCheckout" value="false"/>
		<!-- 链接池会异步检测链接的有效性(设置为true) -->
		<property name="testConnectionOnCheckin" value="true"/>
		<!-- 检测链接池有效性的时间间隔 -->
		<property name="idleConnectionTestPeriod" value="3600"/>
		
	</bean>
<!-- 	<bean id="config_datasource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		驱动类名
		<property name="driverClass" value="${config.jdbc.driver}" />
		url
		<property name="jdbcUrl" value="${config.jdbc.url}" />
		用户名
		<property name="user" value="${config.jdbc.uid}" />
		密码
		<property name="password" value="${config.jdbc.pwd}" />
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数
		<property name="acquireIncrement" value="5"></property>
		初始连接池大小
		<property name="initialPoolSize" value="10"></property>
		连接池中连接最小个数
		<property name="minPoolSize" value="5"></property>
		连接池中连接最大个数
		<property name="maxPoolSize" value="20"></property>
	</bean> -->

	<!-- 数据库连接池 -->
	<bean id="dynamicDataSource"
		class="com.framework.util.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="project_datasource" key="project_datasource" />
				<!-- <entry value-ref="config_datasource" key="config_datasource" /> -->
			</map>
		</property>
		<!-- 默认使用productDataSource的数据源 -->
		<property name="defaultTargetDataSource" ref="project_datasource" />
	</bean>

	<!--3 会话工厂bean sqlSessionFactoryBean -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dynamicDataSource"></property>
		<!-- 别名 -->
		<!-- <property name="typeAliasesPackage" value="com.chris.entities"></property> -->
		<!-- sql映射文件路径 -->
		<!-- <property name="mapperLocations"
			value="classpath*:com/chris/mapper/*Mapper.xml"></property> -->
		<!-- <property name="mapperLocations" value="classpath*:com/framework/dao/*Mapper.xml"></property> -->
		<property name="mapperLocations">
  			<array>
                <value>classpath*:com/framework/dao/*Mapper.xml</value>
                <!-- <value>classpath*:com/chris/mapper/*Mapper.xml</value> -->
            </array>
		</property>
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
	</bean>

	<!--4 自动扫描对象关系映射 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
		<!-- 指定要自动扫描接口的基础包，实现接口 -->
		<!-- <property name="basePackage" value="com.chris.mapper"></property> -->
		<!-- <property name="basePackage" value="com.framework.dao"></property> -->
		<!-- <property name="basePackage" value="com.framework.dao,com.chris.mapper"></property> -->
		<property name="basePackage" value="com.framework.dao"></property>
	</bean>

	<!--5 声明式事务管理 -->
	<!--定义事物管理器，由spring管理事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="project_datasource"></property>
	</bean>
	<!--支持注解驱动的事务管理，指定事务管理器 -->
	<!-- tx:annotation-driven transaction-manager="transactionManager" /> -->
		
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="set*" propagation="REQUIRED" rollback-for="Exception"/>
			
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
			<tx:method name="call*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.framework.service.impl.*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>		

	<!--6 容器自动扫描IOC组件 -->
	<!-- <context:component-scan base-package="com.chris"></context:component-scan> -->
	<context:component-scan base-package="com.framework"></context:component-scan>

	<!--7 aspectj支持自动代理实现AOP功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

	<!-- spring task -->
	<!-- spring 定时任务注解配置 -->
	<!-- 用@Component注解定时类，用 @Scheduled(cron="0/5 * * * * ? ") 注解定时方法 -->
	<!-- 定时器开关 -->
	<!-- 自动扫描task包下的所有类 -->
 	<!-- <context:component-scan base-package="com.framework.task" /> -->
	<task:scheduled-tasks> 
		<!-- 参数：cron="秒 分 小时 天 月 星期 年 -->
		<!-- 范围： 秒（0~59） 分钟（0~59）小时（0~23）天（0~31）月（0~11）天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT） -->
		<!-- 语法： "*" 每个时间点. "/" 指定触发间隔时间.(例如:3/20 表示从第三秒开始每20秒执行一次.)  "?" 不指定  -->
		<task:scheduled ref="taskSendNotification" method="run" cron="0/20 * * * * ?"/>
		<!-- 每30分钟发送一次推送失败的消息 -->
		<task:scheduled ref="taskSendNotificationFail" method="run" cron="* 0/30 * * * ?"/>
		<!-- 每20秒更新一次已断电工单状态 -->
		<task:scheduled ref="taskUpdateWorkOrderPo" method="run" cron="0/20 * * * * ?"/>
		<!-- 每20秒更新一次设备操作室状态 -->
		<task:scheduled ref="taskUpdateOpDeviceStatus" method="run" cron="0/20 * * * * ?"/>
		<!-- **已改用手用方式**每20秒更新一次可发牌主电室设备 -->
		<!-- <task:scheduled ref="taskUpdateOpDeviceOpRoomStatus" method="run" cron="0/20 * * * * ?"/> -->
	</task:scheduled-tasks>
</beans>